#version 330 core

// output
out vec4 FragColor;

// inputs
in vec3 POSITION;
in vec3 NORMAL;
in vec3 COLOR;
in vec2 UV;

// uniform float
uniform float roughness;

// uniform vec3 - COLORS
uniform vec3 baseColor;
uniform vec3 lightColor; 

// uniform vec3 - POSITIONS
uniform vec3 lightPos;
uniform vec3 cameraPos;

// uniform sampler2D
uniform sampler2D baseTexture;
uniform sampler2D roughnessTexture;

void main() { 
    // ambient lighting
	vec3 ambient = vec3(0.1f);

    // diffuse lighting
    vec3 normal = normalize(NORMAL);
	vec3 lightDirection = normalize(lightPos - POSITION);
	float diffuse = max(dot(normal, lightDirection), 0.0f);
    float distance = length(lightPos - POSITION);
    float attenuation = 1.0 / (1.0 + 0.1 * distance + 0.01 * distance * distance);

    // colors
    vec3 baseColor = texture(baseTexture, UV).rgb * baseColor * COLOR;
    vec3 diffuseColor = (diffuse * lightColor * attenuation) + ambient;

    

    FragColor = vec4(baseColor * diffuseColor , 1.0f);
}