#version 330 core

// output
out vec4 FragColor;

// inputs
in vec3 POSITION;
in vec3 NORMAL;
in vec3 COLOR;
in vec2 UV;

// uniform float
uniform float roughness;
uniform float lightIntensity = 1.5f;

// uniform vec3 - COLORS
uniform vec3 baseColor;
uniform vec3 lightColor; 

// uniform vec3 - POSITIONS
uniform vec3 lightPos; 
uniform vec3 cameraPos;

// uniform sampler2D
uniform sampler2D baseTexture;
uniform sampler2D roughnessTexture;

void main() { 
    // ambient lighting
	float ambient = 0.20f;

    // diffuse lighting
    vec3 normal = normalize(NORMAL);
	vec3 lightDirection = normalize(lightPos - POSITION);
	float diffuse = max(dot(normal, lightDirection), 0.0f);

    // specular lighting
	vec3 viewDirection = normalize(cameraPos - POSITION);
	vec3 reflectionDirection = reflect(-lightDirection, normal);
	float specAmount = pow(max(dot(viewDirection, reflectionDirection), 0.0f), 16);
	float specular = specAmount * (1 - roughness);

    FragColor = vec4((texture(baseTexture, UV).rgb * (diffuse + ambient) + texture(roughnessTexture, UV).r * specular) * lightColor, 1.0f);
}